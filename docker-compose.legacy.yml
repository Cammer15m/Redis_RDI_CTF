version: '3.8'

services:
  # PostgreSQL - Source database with music data
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: chinook
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./seed/music_database.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d chinook"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      ctf_network:
        ipv4_address: 172.20.0.10

  # Redis - Target database for RDI
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      ctf_network:
        ipv4_address: 172.20.0.11

  # RedisInsight - Redis management UI
  redisinsight:
    image: redis/redisinsight:latest
    container_name: redisinsight
    ports:
      - "5540:5540"
    volumes:
      - redisinsight_data:/db
    restart: unless-stopped
    depends_on:
      - redis
    networks:
      ctf_network:
        ipv4_address: 172.20.0.12

  # SQLPad - PostgreSQL query interface
  sqlpad:
    image: sqlpad/sqlpad:6
    container_name: sqlpad
    ports:
      - "3001:3000"
    environment:
      SQLPAD_ADMIN: admin@ctf.local
      SQLPAD_ADMIN_PASSWORD: ctfpassword
      SQLPAD_APP_LOG_LEVEL: info
      SQLPAD_WEB_LOG_LEVEL: warn
      SQLPAD_CONNECTIONS__pgdemo__name: CTF-Music-DB
      SQLPAD_CONNECTIONS__pgdemo__driver: postgres
      SQLPAD_CONNECTIONS__pgdemo__host: postgres
      SQLPAD_CONNECTIONS__pgdemo__database: chinook
      SQLPAD_CONNECTIONS__pgdemo__username: postgres
      SQLPAD_CONNECTIONS__pgdemo__password: postgres
    depends_on:
      - postgres
    networks:
      ctf_network:
        ipv4_address: 172.20.0.13

  # Load Generator for realistic data simulation
  loadgen:
    build:
      context: .
      dockerfile: Dockerfile.loadgen
    container_name: loadgen
    volumes:
      - ./scripts:/scripts
    depends_on:
      - postgres
    networks:
      ctf_network:
        ipv4_address: 172.20.0.14

  # Redis RDI - Data Integration platform (placeholder for user's cloud instance)
  # Note: Users will connect to their own Redis Cloud RDI instance
  # This is just for local development/testing
  redis-rdi:
    image: redis/rdi:latest
    container_name: redis-rdi
    ports:
      - "8080:8080"
      - "8081:8081"
    environment:
      - RDI_HOST=0.0.0.0
      - RDI_PORT=8080
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      ctf_network:
        ipv4_address: 172.20.0.15

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  redisinsight_data:
    driver: local

networks:
  ctf_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/24
          gateway: 172.20.0.1
