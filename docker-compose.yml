services:
  # PostgreSQL database with CTF music data
  postgresql:
    image: 'postgres:15.3-bullseye'
    container_name: rdi-ctf-postgres
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_DB=musicstore
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - ./seed/music_database.sql:/docker-entrypoint-initdb.d/init-db.sql
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d musicstore"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Insight for RDI configuration and monitoring
  redis-insight:
    image: redis/redisinsight:latest
    container_name: rdi-ctf-insight
    ports:
      - '5540:5540'
    volumes:
      - redisinsight_data:/data
    depends_on:
      postgresql:
        condition: service_healthy
    restart: unless-stopped

  # RDI CLI container for configuration and management
  rdi-cli:
    image: redislabs/redis-di-cli:latest
    container_name: rdi-ctf-cli
    volumes:
      - ./rdi-config:/config
      - ./scripts:/scripts
    working_dir: /config
    depends_on:
      postgresql:
        condition: service_healthy
    command: tail -f /dev/null  # Keep container running
    restart: unless-stopped

  # Load generator for testing RDI sync
  load-generator:
    build:
      context: .
      dockerfile: Dockerfile.loadgen
    container_name: rdi-ctf-loadgen
    volumes:
      - ./scripts:/scripts
    depends_on:
      postgresql:
        condition: service_healthy
    environment:
      - DB_HOST=postgresql
      - DB_PORT=5432
      - DB_NAME=musicstore
      - DB_USER=postgres
      - DB_PASSWORD=postgres
    restart: unless-stopped
    command: tail -f /dev/null  # Keep container running, start load generation manually

  # Web interface for CTF instructions and monitoring
  web-interface:
    build:
      context: .
      dockerfile: Dockerfile.web
    container_name: rdi-ctf-web
    ports:
      - '8080:80'
    volumes:
      - ./web:/usr/share/nginx/html:ro
      - ./labs:/usr/share/nginx/html/labs:ro
    restart: unless-stopped

  # Optional: Local Redis for testing (users can use Redis Cloud instead)
  # Start with: docker-compose --profile local-redis up
  redis:
    image: redis:7-alpine
    container_name: redis-local
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    profiles:
      - local-redis

volumes:
  postgres_data:
    driver: local
  redisinsight_data:
    driver: local
  redis_data:
    driver: local
