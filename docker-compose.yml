version: '3.8'
services:
  grafana:
    image: grafana/grafana
    container_name: grafana
    environment:
      - GF_INSTALL_PLUGINS=redis-app,redis-datasource,grafana-clock-panel,grafana-simple-json-datasource
      - GF_SECURITY_ADMIN_PASSWORD=${PASSWORD}
    volumes:
      - './grafana:/var/lib/grafana'
      - './grafana_config/grafana.ini:/etc/grafana/grafana.ini'  
    ports:
      - '3000:3000'        
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 5

  docs:
    image: httpd:2.4.63
    container_name: docs
    environment:
      - RDI_VERSION=${RDI_VERSION}
      - VM_HOST=${HOSTNAME}
      - HOST_IP=${HOST_IP}
      - DOMAIN=${DOMAIN}
    depends_on:
      - grafana
    ports:
      - '9080:80'
    volumes:
      - './dist/client:/usr/local/apache2/htdocs/'
      - './httpd.conf:/usr/local/apache2/conf/httpd.conf'

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - './prometheus/:/etc/prometheus/'
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - '9090:9090'        

  redis-insight-2:
    image: redis/redisinsight:latest
    container_name: redis-insight-2
    ports:
      - '5540:5540'
    volumes:
      - './redisinsight.db:/root/.redisinsight-v2-stage/redisinsight.db'

  app:
    privileged: true
    build:
      context: ./from-repo
      dockerfile: Dockerfile.app
    container_name: app
    ports:
      - '8081:8081'    
    environment:
      - REDIS_TARGET_DB_HOST=3.148.243.197
    volumes:
      - './from-repo/app:/app'

  dozzle:
    container_name: dozzle
    image: 'amir20/dozzle:latest'
    ports:
      - '8080:8080'
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'



  postgresql:
    image: 'postgres:15.3-bullseye'
    container_name: postgresql
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_DB=chinook
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - './create_track_table.sql:/docker-entrypoint-initdb.d/01-create_track_table.sql'
      - './init-postgres-for-debezium.sql:/docker-entrypoint-initdb.d/02-init-postgres-for-debezium.sql'
      - './postgresql.conf:/etc/postgresql/postgresql.conf'
    command: ['postgres', '-c', 'config_file=/etc/postgresql/postgresql.conf']
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-exporter:
    container_name: postgres-exporter
    image: prometheuscommunity/postgres-exporter
    environment:
      DATA_SOURCE_NAME: 'postgresql://postgres:postgres@postgresql:5432/?sslmode=disable'
    links:
      - postgresql
      - prometheus

  sqlpad:
    image: 'sqlpad/sqlpad:6'
    hostname: sqlpad
    container_name: sqlpad
    ports:
      - '3001:3000'
    environment:
      SQLPAD_ADMIN: '${RE_USER}'
      SQLPAD_ADMIN_PASSWORD: '${PASSWORD}'
      SQLPAD_APP_LOG_LEVEL: info
      SQLPAD_WEB_LOG_LEVEL: warn
      SQLPAD_CONNECTIONS__pgdemo__name: Ingest-Postgres-DB
      SQLPAD_CONNECTIONS__pgdemo__driver: postgres
      SQLPAD_CONNECTIONS__pgdemo__host: postgresql
      SQLPAD_CONNECTIONS__pgdemo__database: chinook
      SQLPAD_CONNECTIONS__pgdemo__username: postgres
      SQLPAD_CONNECTIONS__pgdemo__password: postgres

  loadgen:
    image: loadgen
    hostname: loadgen
    container_name: rdi-loadgen
    ports:
      - '9121:9121'
      - '13000:13000'
      - '443:443'
    build:
      context: .
      dockerfile: rdi.dockerfile
    volumes:
      - './from-repo/scripts/:/scripts/'
      - './from-repo/ingest_config/:/home/labuser/ingest_config/'