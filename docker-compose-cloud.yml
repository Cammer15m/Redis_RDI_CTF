services:
  # PostgreSQL source database
  postgresql:
    image: 'postgres:15.3-bullseye'
    container_name: rdi-postgres
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_DB=chinook
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - './create_track_table.sql:/docker-entrypoint-initdb.d/create_track_table.sql'
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Insight for monitoring cloud Redis
  redis-insight:
    image: redis/redisinsight:latest
    container_name: rdi-insight
    ports:
      - '5540:5540'
    volumes:
      - redis-insight-data:/data

# Redis Enterprise removed - using shared Redis database

  # RDI CLI container (using official image like rdi-training)
  rdi-cli:
    build:
      context: .
      dockerfile: rdi-simple.dockerfile
    container_name: rdi-cli
    ports:
      - '13000:13000'
    environment:
      - POSTGRES_HOST=postgresql
      - POSTGRES_PORT=5432
      - POSTGRES_DB=chinook
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - REDIS_HOST=3.148.243.197
      - REDIS_PORT=13000
      - REDIS_USER=default
      - REDIS_PASSWORD=redislabs
    volumes:
      - './from-repo/scripts:/scripts'
      - './rdi-config:/rdi-config'
    depends_on:
      postgresql:
        condition: service_healthy

  # SQLPad for PostgreSQL queries
  sqlpad:
    image: 'sqlpad/sqlpad:6'
    container_name: rdi-sqlpad
    ports:
      - '3001:3000'
    environment:
      SQLPAD_ADMIN: 'admin@rl.org'
      SQLPAD_ADMIN_PASSWORD: 'redislabs'
      SQLPAD_APP_LOG_LEVEL: info
      SQLPAD_WEB_LOG_LEVEL: warn
      SQLPAD_CONNECTIONS__pgdemo__name: Ingest-Postgres-DB
      SQLPAD_CONNECTIONS__pgdemo__driver: postgres
      SQLPAD_CONNECTIONS__pgdemo__host: postgresql
      SQLPAD_CONNECTIONS__pgdemo__database: chinook
      SQLPAD_CONNECTIONS__pgdemo__username: postgres
      SQLPAD_CONNECTIONS__pgdemo__password: postgres
    depends_on:
      postgresql:
        condition: service_healthy

  # Web interface for instructions
  web:
    image: nginx:alpine
    container_name: rdi-web
    ports:
      - '8080:80'
    volumes:
      - './web:/usr/share/nginx/html'
    restart: unless-stopped

  # Grafana for monitoring
  grafana:
    image: grafana/grafana
    container_name: rdi-grafana
    environment:
      - GF_INSTALL_PLUGINS=redis-app,redis-datasource,grafana-clock-panel,grafana-simple-json-datasource
      - GF_SECURITY_ADMIN_PASSWORD=redislabs
    volumes:
      - './grafana:/var/lib/grafana'
      - './grafana_config/grafana.ini:/etc/grafana/grafana.ini'
    ports:
      - '3000:3000'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus
    container_name: rdi-prometheus
    volumes:
      - './prometheus/:/etc/prometheus/'
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - '9090:9090'

volumes:
  redis-insight-data:
